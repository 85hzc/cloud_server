#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('weixin:server');
var http = require('http');
var devConn = require('dev_conn');
var wsSrv = require('ws-server');


var mysql   = require('mysql');
var db = require('db');
var client = mysql.createConnection(db.mysql);
 
client.connect();




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('connection', onNewConnection);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

function onNewConnection(socket) {
    socket.id=devConn.newConnection(socket);
    socket.on('close', function() {
        if(typeof(socket.id) == 'undefined') {
            console.log("socket.id is undefined!");
            return;
        }
        devConn.releaseConnection(socket.id);
    });
    /*socket.on('timeout', function(){
            console.log("onNewConnection"+Date.now());
    });*/
}


var net = require('net');
var gateway_tcp = require('gateway_tcp');

var PORT = 4001;

var tcpServer = net.createServer();
var sockets= [];

var dsockets=[];

tcpServer.on('connection', function(socket) {
    socket.name = socket.remoteAddress + ':' + socket.remotePort;

    socket.setKeepAlive(true);
    socket.id = devConn.newConnection(socket);
    //console.log("is socket is"+socket.id);

    sockets.push(socket);

    //dsockets.push(socket.id);




    socket.on('data', function(data) {

      //console.log("data is id :"+socket.id);
        gateway_tcp.message_handle(data, socket);
    });

    socket.on('end', function() {
        sockets.splice(sockets.indexOf(socket), 1);
    });

    socket.on('close', function() {
        console.log("close:" + socket.name);
        console.log("close socket id is:" + socket.id);

 /*       var devIdListStr = "";

        for(var i=0; i<dsockets.length; i++) {

        devIdListStr = devIdListStr + dsockets[i];
        if(i<dsockets.length-1) {
            devIdListStr = devIdListStr + ",";
        }
          
    }
    console.log(devIdListStr);
    var updateStr="UPDATE iot_device SET online='0' WHERE deviceId IN (" + devIdListStr + ")";
    console.log("setDevOffline updateStr="+updateStr);
    client.query(updateStr, function(err, result) { 
        if (err) {
            console.error(err.stack);
        }
    });*/


     /*   if(typeof(socket.id) == 'undefined') {
            console.log("socket.id is undefined!");
            return;
        }*/
        devConn.releaseConnection(socket.id);
    });

    socket.on('timeout', function() {
        socket.end();
    });

    socket.on('error', function(error) {
        console.log(error);
        connection.end();
    });
});

tcpServer.listen(PORT);

//console.log("TCP Server Listening on " + PORT);


var ws=require("nodejs-websocket");
var wsServer = ws.createServer(function(conn) {
    conn.on("text", function(msg) {

        wsSrv.message_handle(msg, conn);
   
    });
    conn.on("close", function(code, reason) {
        console.log("ws conn close: code="+code+", reason="+reason);
    });
    conn.on("error", function(code, reason) {
        console.log("ws conn error: code="+code+", reason="+reason);
    });
}).listen(3009);



