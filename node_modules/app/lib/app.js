var socket_arr = require('../../socket_arr');
var gateway_priv = require('../../gateway_priv');
var cmdkey = require('cmdkey');
var devConn = require('dev_conn');

/*var pg = require('pg');
var db = require('db');
var pgString = db.consqlString;
var client = new pg.Client(pgString);
client.connect();*/


/*var mysql   = require('mysql');
var db = require('db');
var client = mysql.createConnection(db.mysql);
 
client.connect();*/


/*
var mysql   = require('mysql');
var db = require('db');
// var myClient = mysql.createConnection(db.mysql);
 
// myClient.connect();



function handleError (err) {  
    if (err) {
        // 如果是连接断开，自动重新连接
    if (err.code === 'PROTOCOL_CONNECTION_LOST') {
            connect();
    } else {
        console.error(err.stack || err);
    }
    }
}

// 连接数据库  
function connect () {
    client = mysql.createConnection(db.mysql);
    client.connect(handleError);
    client.on('error', handleError);
}
      
var client;
connect();*/


var mysql   = require('mysql');
var db = require('db');

var client;
function handleDisconnect() {
client = mysql.createConnection(db.mysql); // Recreate the connection, since
// the old one cannot be reused.
client.connect(function(err) {              // The server is either down
if(err) {                                     // or restarting (takes a while sometimes).
console.log('error when connecting to db:', err);
setTimeout(handleDisconnect, 1000); // We introduce a delay before attempting to reconnect,
}                                     // to avoid a hot loop, and to allow our node script to
});                                     // process asynchronous requests in the meantime.
// If you're also serving http, display a 503 error.
client.on('error', function(err) {
console.log('db error', err);
if(err.code === 'PROTOCOL_CONNECTION_LOST') { // Connection to the MySQL server is usually
handleDisconnect();                         // lost due to either server restart, or a
} else {                                      // connnection idle timeout (the wait_timeout
throw err;                                  // server variable configures this)
}
});
}
handleDisconnect();




function send_gw_result(sock, result) {
    var head = new Buffer([0x00, 0x00, 0x00, 0x00]);

    var len = result.length;

    head[1] = len & 0xff;
    head[0] = (len >> 8) & 0xff;

    sock.write(Buffer.concat([head, new Buffer(result)]));

}

function timeformat1(atime){

        if (!(atime instanceof Date)) {
        return "N/A";
    }
     var y = atime.getFullYear();
     var m = atime.getMonth() + 1;
     m = m < 10 ? ('0'+m) : m;
     var d = atime.getDate();
     d = d < 10 ? ("0" + d) : d;
     var h = atime.getHours();
     var minute = atime.getMinutes();
     minute = minute < 10 ? ("0"+minute) : minute;
    var second= atime.getSeconds();
     second = second < 10 ? ("0"+second) : second;


     return y + '-' + m + '-' + d + ' '+h+':'+minute+':'+ second;
}


function send_result(res, retCode, errStr, commandId) {
    var ret = {
        ret: retCode,
        errStr: errStr,
        commandId: commandId
    };
    console.log(JSON.stringify(ret));
    res.send(JSON.stringify(ret));
}

function message_handle(req, res){      
    var message = req.body;
    //var msgType = message.type;
    var msgType = message.msgType;
    console.log(req.body);


  if("dev_bind" == msgType){
    var userId = message.userId;
    var manufacture = message.manufacture;
    var manufactureSN = message.manufactureSN;

     if (typeof(manufacture) == "undefined" || typeof(manufactureSN) == "undefined") {
            send_result(res, 80001, "参数错误！");
            return;
        }


    var selectStr="SELECT * FROM iot_device WHERE manufactureSN='"+manufactureSN+"' AND manufacture='"+ manufacture+"';";
        console.log(selectStr);

        client.query(selectStr,function(err,result){

         if(result.length < 1){


            var insertStr="INSERT INTO iot_device(manufacture,manufactureSN) VALUES('"+manufacture+"','"+manufactureSN+"')";

            console.log(insertStr);
            client.query(insertStr,function(err,result1){


              if(err){

                console.log(err.stack);

                send_result(res,9007,"bind err");
                return;

              }

                 var selectStr3="SELECT @@IDENTITY AS ID";

                    client.query(selectStr3,function(err,result3){


                        var insertStr3="INSERT INTO  dev_user_mapping( userId,deviceId) VALUES('"+userId+"','"+result3[0].ID+"')";

                        console.log(insertStr3);
                        client.query(insertStr3,function(err,result4){



                                var insertStr4="insert into shared_strategy(deviceId) values('"+result3[0].ID+"') ";
                                console.log(insertStr4);
                                client.query(insertStr4,function(err,result4){

                                    if(err){


                            console.log(err.stack);

                            send_result(res,9007,"bind err");
                            return;

                          }else{



                            send_result(res,0,"Success!");
                          }



                                });



                        });


                    });



            });


         }else{


            var selectStr5="select * from dev_user_mapping where userId='"+userId+"' and deviceId='"+result[0].deviceId+"' ";
            console.log(selectStr5);
            client.query(selectStr5,function(err,result5){

                    if(result5.length< 1){

                        var insertStr="INSERT INTO  dev_user_mapping( userId,deviceId) VALUES('"+userId+"','"+result[0].deviceId+"')";
                client.query(insertStr,function(err,results){





                    var selectStr4="insert into shared_strategy(deviceId) values('"+result[0].deviceId+"') ";
                    client.query(selectStr4,function(err,result6){


                           if(err){


                console.log(err.stack);

                send_result(res,9007,"bind err");
                return;

              }else{



                send_result(res,0,"Success!");
              }




                    });


           
                });


                    }else{


                        send_result(res,1," bind fail");



                    }









                    /*else{



                        var updateStr="UPDATE dev_user_mapping SET userId='"+userId+"',deviceId='"+result[0].deviceId+"' WHERE id='"+result5[0].id+"' ";

                        console.log(updateStr);
                        client.query(updateStr,function(err,result6){

                                   if(err){


                console.log(err.stack);

                send_result(res,9007,"bind err");
                return;

              }else{



                send_result(res,0,"Success!");
              }




                        });



                    }*/




            });


                

        
        }

        });

  }



else if("get_dev" == msgType){

    var userId = message.userId
    var values = new Array();

    var selectStr="select manufacture,manufactureSN,iot_device.deviceId from iot_device inner join dev_user_mapping on iot_device.deviceId=dev_user_mapping.deviceId where dev_user_mapping.userId='"+userId+"';";
    //var selectStr="select manufacture,manufactureSN,iot_device.deviceId ,shared_strategy.sharedLock,shared_strategy.sharedBW from iot_device inner join dev_user_mapping on iot_device.deviceId=dev_user_mapping.deviceId  inner  join shared_strategy on iot_device.deviceId=shared_strategy.deviceId where dev_user_mapping.userId='"+userId+"' ";
    console.log(selectStr);
    client.query(selectStr,function(err,result){

         if(err){

                console.log(err.stack);
                return;
            }


      
           result.forEach(function(row){   


             var value = {
                 deviceId:row.deviceId,
                 manufacture:row.manufacture,
                 manufactureSN:row.manufactureSN


            };

            //console.log(JSON.stringify(value));
            values.push(value);                 
        });  

           var value = {
                ret:0,
                values:values


           };


           
            console.log(value);
            res.send(value);

    });


}


  else if("totalBytes" == msgType){

    var values = new Array();

    var arr =  new Array();
    var userId = message.userId;

        var selectStr="SELECT * FROM dev_user_mapping WHERE userId='"+userId+"' ";
        console.log(selectStr);
        
        client.query(selectStr,function(err,result){


            result.forEach(function(row){
                var a=row.deviceId;

                arr.push(a);
            });


            var devIdListStr = "";
             for(var i=0; i<arr.length; i++) {
        devIdListStr = devIdListStr + arr[i];
        if(i<arr.length-1) {
            devIdListStr = devIdListStr + ",";
        }
    }
    console.log("devIdListStr:"+devIdListStr);


            //var selectStr1="select * from transfer_resource where deviceId='"+result[0].deviceId+"';";
           var selectStr1="select sum(totalBytes) as totalBytes,startTime from transfer_resource where deviceId in ('"+devIdListStr+"') and src!='origin' group by date_format(startTime, '%Y-%m');";
            console.log(selectStr1);
            client.query(selectStr1,function(err,result1){

                result1.forEach(function(row) {
            
            var value = {
               totalBytes:row.totalBytes,
                time:timeformat1(row.startTime)
            };

            values.push(value);
        });


         var results = {
            ret:0,
            deviceId:devIdListStr,
            values:values
        };
        console.log(results);
        res.send(results);

            });



        });


  }
  else if("controls" == msgType){

    
    var deviceId = message.deviceId;
    var sharedLock = message.sharedLock;
    var sharedBW = message.sharedBW;

    var selectStr="select * from shared_strategy where deviceId='"+deviceId+"' ";
    console.log(selectStr,function(err,result){

        if(result.length < 1){

            var insertStr="INSERT INTO shared_strategy(deviceId,sharedBW,sharedLock) VALUES('"+deviceId+"','"+sharedBW+"','"+sharedLock+"')";
            console.log(insertStr);

            client.query(insertStr,function(err,results){


            });


        }else{

            var updateStr="UPDATE  shared_strategy SET sharedBW='"+sharedBW+"',sharedLock='"+sharedLock+"' WHERE deviceId='"+deviceId+"' ";

            console.log(updateStr);
            client.query(updateStr,function(err,result1){

                 if (err) {
                        console.error(err.stack);
                        return;
                    }

            });

        }

            send_result(res,0,"Success!");


    });


  }


  else if("delete_dev" == msgType){
    var deviceId = message.deviceId;
    var userId = message.userId;


    var deleteStr="delete from dev_user_mapping where deviceId='"+deviceId+"' and userId='"+userId+"'  ";
        console.log(deleteStr);
        client.query(deleteStr,function(err,result){



    var deleteStr1="delete from shared_strategy where deviceId='"+deviceId+"'  ";
        console.log(deleteStr1);
        client.query(deleteStr1,function(err,result1){

            if (err) {
                        console.error(err.stack);
                        send_result(res,1);
                        
                    }

                    else{

                          send_result(res,0);

                    }

            });


    });



  }

else if (0 == msgType) {

        var host = message.host;
        var deviceId = message.deviceId;
        var path = message.path;
        var values = new Array();


        var index=path.lastIndexOf("\/");
        var subpath=path.substring(index+1,path.length);

        var ar=subpath.lastIndexOf("?");
        
        var paths=subpath.substring(0,ar);

        console.log(paths);


        var selectStr1="SELECT * FROM live_info WHERE path='"+paths+"';";
        console.log(selectStr1);

        client.query(selectStr1,function(err,result1){
           if (err) {
                console.error(err.stack);
                return;
            }

            if(result1.length < 1){

                var insertStr2="INSERT INTO live_info(path,host) VALUES('"+paths+"','"+host+"');";
                console.log(insertStr2);
                client.query(insertStr2,function(err,result2){

                    var selectStr3="SELECT @@IDENTITY AS ID";

                    client.query(selectStr3,function(err,result3){

                            var resourceId=result3[0].ID;

                        var selectStr4="SELECT * FROM dev_live_resource WHERE resourceId ='"+resourceId+"' AND online='1' ;";
                            console.log(selectStr4);
                            client.query(selectStr4,function(err,result4){

                                 result4.forEach(function(row){   
                                    var value={
                                        deviceId:row.deviceId.toString(),
                                        url:row.url
                                    };

                                    console.log(JSON.stringify(value));
                                    values.push(value);                 
                                });  

                                var results={
                                    type: 0,
                                    ret: 0,
                                    resId:resourceId,
                                    list:values

                                };

                                console.log(JSON.stringify(results));
                                res.send(JSON.stringify(results));

                            });

                    });

                });

            }else{


                //var insertStr="INSERT INTO dev_live_resource(resourceId,) VALUES('"+reId+"')";

                var selectStr5="SELECT * FROM dev_live_resource WHERE resourceId='"+result1[0].resourceId+"' AND online='1';";
                console.log(selectStr5);
                client.query(selectStr5,function(err,result5){
                     if (err) {
                            console.error(err.stack);
                            return;
                        }
                        if(result5.length < 1){

                            var results={
                                    type: 0,
                                    ret: 0,
                                    resId:result1[0].resourceId,
                                    list:values

                                };

                                console.log(JSON.stringify(results));
                                res.send(JSON.stringify(results));





                        }else{

                        result5.forEach(function(row){   
                                    var value={
                                        deviceId:row.deviceId.toString(),
                                        url:row.url
                                    };

                                    console.log(JSON.stringify(value));
                                    values.push(value);                 
                                });  

                                var results={
                                    type: 0,
                                    ret: 0,
                                    resId:result1[0].resourceId,
                                    list:values

                                };

                                console.log(JSON.stringify(results));
                                res.send(JSON.stringify(results));


                            }

                });
            }

        });

    }
    else if (1 == msgType) {
        
        var deviceId = message.deviceId;
        var resId = message.resId;
        var url = message.url;
        var cap = message.cap;
        var devId=parseInt(deviceId);
        console.log(devId);


  /*      if(deviceId == "HHH"){

        var results = {

                    type:1,
                    ret:"deviceId is HHH"

           };

            console.log(JSON.stringify(results));
            res.send(JSON.stringify(results));


    }else{*/


        //var selectStr="SELECT * FROM dev_live_resource WHERE resourceId='"+resId+"' AND url='"+url+"'";
        var selectStr="SELECT * FROM dev_live_resource WHERE resourceId='"+resId+"' AND deviceId='"+devId+"'";

        console.log(selectStr);
        client.query(selectStr,function(err,results){

            if(results.length < 1){

                 var insertStr="INSERT INTO dev_live_resource(resourceId,url,deviceId,maxSlaveCnt,online,firstTime) VALUES('"+resId+"','"+url+"','"+devId+"','"+cap+"','1',CURRENT_TIMESTAMP)";  

                console.log(insertStr);

                client.query(insertStr, function(err, result) {
                    if (err) {
                        console.error(err.stack);
                        return;
                    }
 
                });

            }else{


                var updateStr="UPDATE dev_live_resource SET online='1',url='"+url+"',firstTime=CURRENT_TIMESTAMP WHERE resourceId='" + resId + "' AND deviceId='"+devId +"'; ";
                console.log(updateStr);
                client.query(updateStr,function(err,results){
                    if (err) {
                        console.error(err.stack);
                        return;
                    }

                });
            }

            var results = {

                            type:1,
                            ret:0

                   };

                    console.log(JSON.stringify(results));
                    res.send(JSON.stringify(results));


        });

         
    }
    else if ( 2 == msgType ) {
   
        var deviceId = message.deviceId;
        var resId = message.resId;
        var url = message.url;
        var devId=parseInt(deviceId);

        var selectStr = "UPDATE dev_live_resource SET online='0',lastTime=CURRENT_TIMESTAMP WHERE resourceId='" + resId + "' AND deviceId='"+devId +"'; ";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                return;
            }

              var results= {
                type: 2,
                ret: 0

            };

            console.log(JSON.stringify(results));
            res.send(JSON.stringify(results));

            
        });
    }
    else if ( 3 == msgType) {

        var deviceId = message.deviceId;
        //var dst = message.dst;
        var src = message.src;
        var resId = message.resId;
        var a;
        var b; 
        console.log(src);
         var devId=parseInt(deviceId);


        if(src != "origin"){

        var selectStr="SELECT * FROM dev_live_resource WHERE resourceId='"+resId+"' AND deviceId='"+src +"' ; ";
        console.log(selectStr);
        client.query(selectStr,function(err,results){
            if (err) {
                console.error(err.stack);
                return;
            }

            a=results[0].currentSlaveCnt;
            b=a+1;

            var updateStr="UPDATE dev_live_resource SET currentSlaveCnt='"+b+"' WHERE resourceId='" + resId + "' AND deviceId='"+devId +"'; ";
                client.query(updateStr,function(err,result2){


                });


        });

    }


        //var selectStr = "UPDATE dev_live_resource SET deviceId='"+dst + "' WHERE resourceId='" + resId + "' ";
        var selectStr = "INSERT INTO transfer_resource(deviceId,resourceId,src,online) VALUES('"+devId+"','"+resId+"','"+src+"','1')";

        console.log(selectStr);
        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                return;
            }


            var results= {
                type: 3,
                ret: 0

            };

             console.log(JSON.stringify(results));
            res.send(JSON.stringify(results));
           
              
        });
          
    }
    else if (4 == msgType) {

        var deviceId = message.deviceId;
         //var dst = message.dst;
        var src = message.src;
        var resId = message.resId;
        var totalBytes = message.totalBytes;
        var a;
        var b;
        var devId=parseInt(deviceId);

        if(src != "origin"){
        var selectStr="SELECT * FROM dev_live_resource WHERE resourceId='"+resId+"' AND deviceId='"+src +"' ; ";
        console.log(selectStr);
        client.query(selectStr,function(err,results){
            if (err) {
                console.error(err.stack);
                return;
            }

            a=results[0].currentSlaveCnt;
            b=a-1;
            console.log(b);

            if(a > 0){

            var updateStr="UPDATE dev_live_resource SET currentSlaveCnt='"+b+"' WHERE resourceId='" + resId + "' AND deviceId='"+devId +"'; ";
                client.query(updateStr,function(err,result2){

                });

            }

        });
    }

          //var selectStr = "DELETE FROM transfer_resource WHERE deviceId='"+ deviceId + "' AND resourceId='"+ resId + "';";
         var updateStr=" UPDATE transfer_resource SET online='0',totalBytes='"+totalBytes+"' WHERE deviceId='" + devId + "' AND src='"+src +"'; ";

        console.log(updateStr);
        client.query(updateStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                return;
            }

            var results= {
                type: 4,
                ret: 0

            };

             console.log(JSON.stringify(results));
            res.send(JSON.stringify(results));
           
              
        });

     
    }
    else if ("firmware_query" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr =  "SELECT "
            + "firmware_table.publishVersion,iot_device.deviceId,iot_dev_datamodel.firmwareId "
            + "FROM (iot_device JOIN iot_dev_datamodel ON "
            + "iot_device.deviceDataModelId=iot_dev_datamodel.dataModelId) "
            + "LEFT JOIN firmware_table ON "
            + "firmware_table.firmwareId=iot_dev_datamodel.firmwareId "
            + "WHERE iot_device.deviceId='" + devId + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length != 1) {
                send_result(res, 90002, "后台数据库错误！");
                return;
            }

            var firmware_query = {
                ret: 0,
                deviceId: result[0].deviceId,
                newestVersion: result[0].publishVersion,
                firmwareId: result[0].firmwareId
            };

            console.log(JSON.stringify(firmware_query));
            res.send(JSON.stringify(firmware_query));
        });
    }
    else if ("firmware_upgrade" == msgType) {
        var userId = message.userId;
        var devId = message.devId;
        var firmwareId = message.firmwareId;
        var version = message.version;

        var selectStr =  "SELECT "
            + "firmware_version.firmwareId,firmware_version.version,firmware_version.fileName,firmware_version.md5,firmware_table.firmwareDir "
            + "FROM (firmware_version JOIN firmware_table ON "
            + "firmware_version.firmwareId=firmware_table.firmwareId) "
            + "WHERE "
            + "firmware_version.firmwareId='" + firmwareId + "' AND "
            + "firmware_version.version='" + version + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length != 1) {
                send_result(res, 90002, "后台数据库错误！");
                return;
            }

            var socket=devConn.getSocketByDevId(devId);
            if (-1 == socket) {
                send_result(res, 90004, "后台与设备连接错误！");
                return;
            }

            var commandId = cmdkey.create();
            var cmdStr= {
                type: "firmware_upgrade",
                commandId: commandId,
                userId: userId,
                deviceId: devId,
                url:result[0].firmwareDir+result[0].fileName,
                md5:result[0].md5
            };
            console.log(JSON.stringify(cmdStr));
            //socket.write(JSON.stringify(cmdStr)+"\r\n");
            send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");

            send_result(res, 0, "Success!", commandId);
        });
    }
    else if ("plugin_installed" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr =  "SELECT "
            + "gateway_plugin.pluginId,gateway_plugin.version,plugin_table.pluginName "
            + "FROM gateway_plugin,plugin_table "
            + "WHERE gateway_plugin.deviceId='" + devId + "' " 
            + "AND gateway_plugin.pluginId=plugin_table.pluginId ";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            var pluginInstalled = {
                ret: 0,
                devId: devId,
                count: result.length,
                pluginList : []
            };

            for(var i=0; i<result.length; i++) {
                var pluginItem = {
                    pluginId: result[i].pluginId,
                    currVersion: result[i].version,
                    pluginName: result[i].pluginName
                };
                pluginInstalled.pluginList.push(pluginItem);
            }
            console.log(JSON.stringify(pluginInstalled));
            res.send(JSON.stringify(pluginInstalled));
        });
    }
    else if ("plugin_available" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr =  "SELECT pluginId,pluginName, pluginDesc, publishVersion "
            + "FROM plugin_table;"

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            var pluginAvailable = {
                ret: 0,
                devId: devId,
                count: result.length,
                pluginList: []
            };

            for(var i=0; i<result.length; i++) {
                var pluginItem = {
                    pluginId: result[i].pluginId,
                    pluginName: result[i].pluginName,
                    pluginDesc: result[i].pluginDesc,
                    publishVersion: result[i].publishVersion
                };
                pluginAvailable.pluginList.push(pluginItem);
            }
            console.log(JSON.stringify(pluginAvailable));
            res.send(JSON.stringify(pluginAvailable));
        });

    }
    else if ("plugin_action" == msgType) {
        var devId = message.devId;
        var action = message.action;
        var pluginIdList = message.pluginList;
        var selectStr = "SELECT * FROM plugin_table WHERE pluginId IN (" + pluginIdList + ");";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                send_result(res, 90001, "数据库查询错误！");
                return;
            }

            if(result.length < 1) {
                send_result(res, 90008, "插件不存在！");
                return;
            }

            var fileDownloadList = new Array();
            var fileDeleteList = new Array();
            var count = result.length;

            result.rows.forEach(function(row) {
                var pluginDir = row.pluginDir;
                var version = row.publishVersion;
                var pluginId = row.pluginId;

                var selectNameStr = "SELECT * FROM plugin_version "
                    + "WHERE pluginId='" + pluginId + "' AND version='" + version + "';";

                console.log(selectNameStr);
                
                client.query(selectNameStr, function(err, result) {
                    if (err) {
                        console.error(err.stack);
                        send_result(res, 90001, "数据库查询错误！");
                        return;
                    }

                    if(result.length < 1) {
                        send_result(res, 90008, "插件不存在！");
                        return;
                    }

                    var fileName = result[0].fileName;

                    var fileLoc = pluginDir + '/' + result[0].version + '/' + fileName;

                    var fileDownloadStr = {
                        url: fileLoc,
                        pluginId: result[0].pluginId,
                        version: result[0].version 
                    };

                    var fileDeleteStr = {
                        name: fileName,
                        pluginId: result[0].pluginId
                    };

                    fileDownloadList.push(fileDownloadStr);
                    fileDeleteList.push(fileDeleteStr);

                    count--;

                    if (count == 0) {
                        var socket=devConn.getSocketByDevId(devId);
                        if (-1 == socket) {
                            send_result(res, 90004, "后台与设备连接错误！");
                            return;
                        }

                        var commandId = cmdkey.create();

                        if ("remove" == action) {
                            var cmdStr= {
                                type: "plugin_action",
                                commandId: commandId,
                                action: 'delete',
                                deviceId: devId,
                                pluginDeleteList: fileDeleteList
                            };
                        }
                        else {
                            var cmdStr= {
                                type: "plugin_action",
                                commandId: commandId,
                                action: action,
                                deviceId: devId,
                                pluginDownloadList: fileDownloadList,
                            };
                        }

                        console.log(JSON.stringify(cmdStr));
                        //socket.write(JSON.stringify(cmdStr));
                        send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");
                        send_result(res, 0, "Success!", commandId);

                    }

                });
            });

        });
    }
    else if("lirc_type_available"== msgType){
		var values = new Array();
		var userId = message.userId;

		var selectStr="SELECT DISTINCT devType "
			+ " FROM lirc_device;";

    	console.log(selectStr);
    	client.query(selectStr,function(err,result){
        	if(err){
                console.error(err.stack);
    	 		send_result(res,90011,"查询数据库错误！");
    	 		return;
                    
        	}
     		result.forEach(function(row){
                var value=row.devType;
     			values.push(value);

     	    });

     	    var lircTypeAvailable={
     		    ret:0,
     		    values:values
    	    };

        	console.log(JSON.stringify(lircTypeAvailable));
        	res.send(JSON.stringify(lircTypeAvailable));

    	});
    }
	else if("lirc_model_available"== msgType){
		var userId = message.userId;
        var devType = message.devType;
        var values = new Array();
       
        var selectStr="SELECT modelName ,manufacture FROM lirc_device WHERE devType='"
                        + devType + "' ;";
                       // GROUP BY manufacture
        console.log(selectStr);

        client.query(selectStr,function(err,result){
    		if(err){
    			console.error(err.stack);
    			send_result(res,9001,"数据库查询错误！");
    			return;
    		}

    		result.forEach(function(row){   
    		    var value={
    				manufacture:row.manufacture,
                    modelName:row.modelName
                };

                console.log(JSON.stringify(value));
                values.push(value);    				
    		});  

	        var lircModelAvailable={
				ret:0,
				devType:devType,
				values:values

		    };

    		console.log(JSON.stringify(lircModelAvailable));
    		res.send(JSON.stringify(lircModelAvailable));
        });
    }
	else if("lirc_get_key"== msgType){
		var userId = message.userId;
		var lircId = message.lircId;
        var value;

		var selectStr="SELECT * FROM lirc_device WHERE lircId=' " + lircId + " ' ;";

		console.log(selectStr);
		client.query(selectStr,function(err,result){
			if(err){
				 console.error(err.stack);
				 send_result(res,1,"数据库查询错误！");
				 return;
			}
			result.forEach(function(row){
				 value=row.keys;
                 console.log(value);
			});

			var lircGetKey={
				 ret:0,
				 lircId:lircId,
				 key:value
		    };
            
    		console.log(JSON.stringify(lircGetKey));
    		res.send(JSON.stringify(lircGetKey));
		});
	} 
    else if ("dev_get_lirc" == msgType) {
        var userId = message.userId;
        var devId = message.devId;

        var selectStr = "SELECT lircData FROM iot_device WHERE deviceId='"
                + devId + "';";

        console.log(selectStr);


        client.query(selectStr, function(err, result) {

            console.log(result);
            if (err) {
                console.error(err.stack);
				send_result(res,1,"数据库查询错误！");
                return;
            }

            if (result.length != 1) {
				send_result(res,1,"数据库查询错误！");
                return;
            }

            var retStr = {
                ret: 0,
                deviceId: devId,
                lircData: {}
            };

            retStr.lircData=JSON.parse(result[0].lircData);
            console.log(retStr.lircData);
            res.send(JSON.stringify(retStr));
        });
    }
	else if("lirc_ctl" == msgType) {
        var userId = message.userId;
        var devId = message.devId;
        var action = message.action;
        var controls = message.controls;

        if ("set" == action) {
            var socket=devConn.getSocketByDevId(devId);
            if (-1 == socket) {
                send_result(res, 90004, "后台与设备连接错误！");
                return;
            }

            var commandId = cmdkey.create();

            var cmdStr = {
                type: 'lirc_emit',
                commandId: commandId,
                deviceId: devId,
                devData: controls
            };

            console.log(JSON.stringify(cmdStr));
            send_gw_result(socket, JSON.stringify(cmdStr)+"\r\n");
            send_result(res, 0, "Success!", commandId);

            return;
        }

        var selectStr = "SELECT lircData FROM iot_device WHERE deviceId='"
                + devId + "';";

        console.log(selectStr);

        client.query(selectStr, function(err, result) {

            if (err) {
                console.error(err.stack);
				send_result(res,1,"数据库查询错误！");
                return;
            }

            if (result.length != 1) {
				send_result(res,1,"数据库查询错误！");
                return;
            }

            if ("add" == action) {

                console.log(result);
/*修改*/
                /*if (result.rows[0].lircData == 'undefined') {*/ 
                if (!result[0].lircData) {
                    var devList = new Array();
                    result[0].lircData = {
                        count: 0,
                        devList: devList
                    };
                }
                var count = result.lircData.devList.push(controls);
                result[0].lircData.count = count;

                var updateStr = "UPDATE iot_device SET lircData='"
                        + JSON.stringify(result[0].lircData) + "' WHERE deviceId='"
                        + devId + "';";

                console.log(updateStr);

                client.query(updateStr, function(err, result1) {
                    if (err) {
                        console.error(err.stack);
                        send_result(res,1,"数据库操作失败！");
                    }
                    else {
                        send_result(res, 0, "Success!");
                    }
                });
            }
            else if ("delete" == action) {
                var lircData = result[0].lircData;
                var devList = lircData.devList;
                var index = -1;

                for (var i in devList) {
                    if (devList[i].lircId == controls.lircId) {
                        index = i;
                    }
                }

                if (index != -1) {
                    devList.splice(index, 1);
                    result.rows[0].lircData.count--;

                    var updateStr = "UPDATE iot_device SET lircData='"
                        + JSON.stringify(result[0].lircData) + "' WHERE deviceId='"
                        + devId + "';";

                    console.log(updateStr);

                    client.query(updateStr, function(err, result1) {
                        if (err) {
                            console.error(err.stack);
                            send_result(res,1,"数据库操作失败！");
                        }
                        else {
                            send_result(res, 0, "Success!");
                        }
                    });

                }
            }
            else {
                send_result(res,1,"参数错误！");
            }
        });

    }
    else if("lirc_get_lircId"== msgType){
        var manufacture = message.manufacture;
        var modelName = message.modelName;
        var devType = message.devType;
        var value;

        var selectStr="SELECT lircId "
            + "FROM lirc_device WHERE manufacture='" + manufacture + "' AND modelName='" + modelName + "' AND devType='" + devType + "' ;";

        console.log(selectStr);
        client.query(selectStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,1,"数据库查询错误！");
                return;
            }

            console.log(result);


            var lircGetKey={
                ret:0,
                lircId:result[0].lircId,
            };

            console.log(JSON.stringify(lircGetKey));
            res.send(JSON.stringify(lircGetKey));
        });
    }
   /* else if("lirc_set"== msgType){

        var lircId = message.settings.lircId;

        console.log(lircId);

        var selectStr="UPDATA \"lircId\" "
            + "FROM lirc_device WHERE \"manufacture\"='" + manufacture + "' AND \"modelName\"='" + modelName + "' AND \"devType\"='" + devType + "' ;";

        var selectStr1 = "UPDATA lirc_device  SET nickName   WHERE \"lircId\" = "+lircId+";";
        console.log(selectStr);
        client.query(selectStr,function(err,result){
            if(err){
                console.error(err.stack);
                send_result(res,1,"数据库查询错误！");
                return;
            }

            console.log(result);


            var lircGetKey={
                ret:0,
                lircId:result.rows[0].lircId,
            };

            console.log(JSON.stringify(lircGetKey));
            res.send(JSON.stringify(lircGetKey));
        });
    }*/
    else if("get_device_map"== msgType){
        var values = new Array();
        var placeDate = new Array();

        var selectStr =" SELECT deviceId ,place,deviceType,connection,devData,online "
                        + "FROM iot_device ; ";
        console.log(selectStr);

        client.query(selectStr,function(err ,result){
            if(err){
                console.error(err.stack);
                send_result(res,'9001',"数据库查询错误！");
                return;
            }
			result.forEach(function(row){
         	var retCode={
            	devId:row.deviceId,
                place:row.place,
                devType:row.deviceType,
                online:row.online,
                nick_Name:row.devData.name,
                connection:row.connection
            	};
	            console.log(JSON.stringify(retCode));
	            values.push(retCode);
            }); 
            var value= {value:values };
            console.log(JSON.stringify(value));
            res.send(JSON.stringify(value));  
        });
    }
    else if("set_room" == msgType){
    	var devId = message.devId;
    	var place = message.place;

    	var updateStr="UPDATE iot_device SET place='"
                        + place  + "' WHERE deviceId='"
                        + devId + "';";

            console.log(updateStr);
           client.query(updateStr,function(err,result){
           	if(err){
           		console.error(err.stack);
           		send_result(res,1,"数据库操作失败！");

           	}else{

           		send_result(res, 0, "Success!");
           	}
        });
    }
}
module.exports.message_handle = message_handle;
