var pg = require('pg');

var http = require('http');
var events = require('events');

var pgString = "postgres://wudi:123@localhost/cloud_server_db";
var client = new pg.Client(pgString);


client.connect();


function get_client_socket(sn)
{
    var i = 0;
    
    for ( i = 0; i < socket_arr.length; i++)
    {
        if ( sn == socket_arr[i].sn_json)
        {
            return socket_arr[i].socket;
        }
    }

    return -1;
}

/* return: 3 socket write successfully;
 *         1 socket closed;
 *         2 socket write failed;
*/

function server_action_handler(sn, action, ipk_name, serial)
{
    var i = 0;

    console.log("Enter server_action_handler");

    var socket = get_client_socket(sn);

    if ( -1 == socket)
    {
        console.log("the client is not online");
        return 1;
    }

    var string = "sn = " + sn + " action = " + action + " ipk_name = " + ipk_name + " serial = " + serial;

    console.log(string);

    if ( "" == ipk_name)
    {
        var actionString = "{\"type\"" + ":\"" + action + "\",\"serial\":2}";
    }
    else    
    {
        console.log("test to client");

        var actionString = "{\"type\"" + ":\"" + action + "\",\"serial\":1, \"package\":[\"" + ipk_name + "\"]}";
    }

    console.log(actionString);

    if (socket.write(actionString))
    {
        console.log("write true");
        return 3;
    }
    else
    {
        console.log("write flase");
        return 2;
    }
}

var socket_arr = new Array();
/*
    var socket_arr_obj = new Object();
    socket_arr_obj.socket = socket;
    socket_arr_obj.sn_json = sn_json;
    socket_arr.push(socket_arr_object);
*/

function handle_client_offline(socket)
{
    console.log("Enter handle_client_offline");
    console.log(socket);

    this.register_obj.socket.online_status = 0;
    database_update_client_online_status(this.register_obj);
    console.log("Exit handle_client_offline");
}

function response_to_client_register( register_obj, status)
{
    console.log("Enter response_to_client_register");
    register_obj.http_res.writeHead(200, {'Content-Type': 'application/json'});
    var end_str = "{\"type\":\"resp_register\", \"serial\": 0, \"status\":" + status + "}";
    register_obj.http_res.end(end_str);
    console.log("Exit response_to_client_register");    
}


/* array, not found and insert.
          found, delete it and insert.
 */
function socket_array_handler(socket_arr_obj, online)
{
    var i = 0;

    for ( i = 0; i < socket_arr.length; i++)
    {
        if ( socket_arr[i].sn_json == socket_arr_obj.sn_json)
        {
            socket_arr[i].socket.destroy();
            socket_arr.splice(i, 1);
            break;
        }
    }

    if ( 1 == online)
    {
        console.log("online 1");
        socket_arr.push(socket_arr_obj);       
    }
    else
    {
        console.log("online 0");
    }

    console.log("socket_arr_length =" + socket_arr.length);

    for ( i = 0; i< socket_arr.lenght; i++)
    {
        console.log("i = " + i + "sn = " + socket_arr[i].sn_json);
    }
}
 
function database_response_to_update_handler(update_result)
{
    console.log("Enter database_response_to_update_handler");
    console.log(this.register_obj.socket.sn);

    var socket_array_obj = new Object();
    socket_array_obj.socket = this.register_obj.socket;
    socket_array_obj.sn_json = this.register_obj.socket.sn;

    if ( 1 == this.register_obj.socket.online_status)
    {
        console.log("online 1 2");
        response_to_client_register(this.register_obj, 2);
        socket_array_handler(socket_array_obj, 1);
    }

    /* 0 , means the client is offline */
    else
    {
        console.log("online 0 2");
        socket_array_handler(socket_array_obj, 0);
    }

    console.log("Exit database_response_to_update_handler");
}

/* Contract: insert_query_result -> call event.
 * Purpose : if insert successfully, call event.
 */
 
function database_response_to_insert_handler(insert_result)
{
    console.log("Enter database_register_insert_register_response_handler");
    /* we should add the client info to socket_arr */
    {
        var socket_array_obj = new Object();
        socket_array_obj.socket = this.register_obj.socket;
        socket_array_obj.sn_json = this.register_obj.socket.sn;
        socket_array_handler(socket_array_obj, 1);
    }
    response_to_client_register(this.register_obj, 0);
    /* call event */
    console.log("Exit database_register_insert_register_response_handler");
}

function database_update_client_online_status( register_obj)
{
        var update_string = "UPDATE tblequipment SET onlinestatus = '"
                          + register_obj.socket.online_status 
                          +"' WHERE sn = '" 
                          + register_obj.socket.sn+ "'";
        console.log(update_string);
        var update_query = client.query( update_string);

        update_query.register_obj = register_obj;
        update_query.on('end', database_response_to_update_handler);
}

function database_error_handler(error)
{
    console.log("Enter database_error_handler");
    console.log(error);
}

/* Contract: sn_json -> database update; event called after database update;
 * Purpose : When sn_json comes, we should
 *           (1) insert the entry or update the entry(online) about the client info to the database.
 *           (2) called the event to update the socket_array, & response.
 * Examples: after a sn info update the database  
 *           (1) successfully, call the success event.
 *           (2) error,        call the error handler event.
 */
function database_register_packet_handler(register_obj)
{
    console.log("Enter database_register_packet_handler");
    var select_string = "SELECT * FROM tblequipment WHERE SN = '" + register_obj.http_req.body.sn + "'";
    console.log(select_string);
    var select_query = client.query( select_string);
    select_query.register_obj = register_obj;

    select_query.on('end', database_response_to_select_handler);
    select_query.on('error', database_error_handler);
    console.log("Exit database_register_packet_handler");
}

/* Contract: register_obj -> 1.database update; 2. socket_array update; 3. response handled
 * Purpose : When a register packet comes we should 
 *          (1) insert or update the entry about the client info to  the database.
 *          (2) update the entry about the client to the socket_array
 *          (3) when the above two handled, we shoud response to the client correctly.
 *          (4) we should listen on the event socket.close and handle the event - client offline.
 * Example : when a register packet comes, its sn is phicomm123456.
 *          (1) if the database does not have the entry whose sn is phicomm123456, insert it.
 *              if already has, update it--set online 1.
 *          (2) if socket array do not has the sn, insert it.
 *              if already has, delete it and insert it .
 *          (3) after the two above, respose correctly.
 * 
 */

function client_register_packet_handler( register_obj)
{
    console.log("Enter client_register_packet_handler");
    database_register_packet_handler(register_obj);
    console.log("Exit client_register_packet_handler");
}

/* Contract: http req, http res -> 
 * Purpose : When a http packet comes from a client, we want to handle it correctly.
 */
function client_packet_handler( req, res)
{
    console.log("Enter client_handler");

   // console.log(req);
    if ( req.body.sn)
    {
        /* A client register packet comes */
        var register_obj = new Object();
        register_obj.socket = req.socket;
        register_obj.socket.sn = req.body.sn;
        register_obj.socket.online_status = 1;
        register_obj.http_req = req;
        register_obj.http_res = res;
        req.socket.register_obj = register_obj;
        req.socket.setKeepAlive(true);
        req.socket.setTimeout(0);
      
 //       register_obj.addLister('database_query_response', database_query_response_handler);

        client_register_packet_handler(register_obj);
/*        console.log("has sn");
          req.socket.sn_json = req.body.sn; */        
/*        handle_client_register(req, res); */
        
        req.socket.on('close', handle_client_offline);
    }
    
    else 
    {
        if ( req.body.sb)
        {
            console.log("has req");
            server_action_handler("phicomm123456", "install", "cloud_test", "serial321");
        }

        console.log("no sn");
    }
}

function check_input(type, req, res)
{
    if ( "username" == type)
    {

        var username = req.body.username;
        var select_string = "SELECT * FROM user_common WHERE username = '" + username + "'";

        var select_query = client.query( select_string);
        select_query.res = res;
        select_query.on('end', database_response_to_select_handler);    
    }
}


/* Contract: database_select_result -> insert or update database.
 * Purpose : According to the database result, 
 *           (1) insert or update database
 *           (2) call event after insert or update database.
 */

function database_response_to_select_handler(select_result)
{
    console.log("Enter database_register_packet_response_handler");

    if ( 0 == select_result.rowCount)
    {
        this.res.writeHead(200, {'Content-Type': 'text/html'});
        var end_str = "0";
        this.res.end(end_str);
    }
    else
    {
        console.log("0 != rowCount");
        this.res.writeHead(200, {'Content-Type': 'text/html'});
        var end_str = "1";
        this.res.end(end_str);
    }
}

function db_response_to_insert_common_register_handler(result)
{
    this.res.render('register_success');
}

function db_response_to_common_register_handler(select_result)
{
    console.log("db_response_to_common_register_handler");

    if ( 0 == select_result.rowCount)
    {
        var insert_string = "INSERT INTO user_common VALUES ('"
                          + this.username +"','"
                          + this.password + "')";

        console.log(insert_string);
        var insert_query = client.query(insert_string);
        insert_query.res = this.res;
        insert_query.on( 'end', db_response_to_insert_common_register_handler);
    }
    else
    {
        console.log("0 != rowCount");
        this.res.render('register_repeat');
    }
}


function check_register(type, username, password, res)
{
    if ( "common_register" == type)
    {
        var select_string = "SELECT * FROM user_common WHERE username = '" + username + "'";
        console.log(select_string);

        var select_query = client.query( select_string);
        select_query.username = username;
        select_query.password = password;
        select_query.res = res;
        select_query.on('end', db_response_to_common_register_handler);            
    }
}


function db_response_to_common_login_handler(result)
{
    console.log("db_response_to_common_login_handler");

    console.log(result);

    console.log(result.password);
    if ( this.password == result.password)
    {
        /* after login success, keep alive should be set */
//        req.socket.setKeepAlive(true);
//        req.socket.setTimeout(0);

        console.log("login_success");
        this.res.render('login_success');
        
    }

    else
    {
        this.res.render('login_failure_wrong_password');
    }
}

function db_response_to_common_login_end_handler(result)
{
    console.log("db_response_to_common_login_handler");

    console.log(result);

    if (0 == result.rowCount)
    {
        this.res.render('login_no_username');
    }
}


function check_login(type, username, password, res)
{
    if ( "common_login" == type)
    {
        var select_string = "SELECT * FROM user_common WHERE username = '" + username + "'";
        console.log(select_string);

        var select_query = client.query( select_string);
        select_query.username = username;
        select_query.password = password;
        select_query.res = res;
        select_query.on('row', db_response_to_common_login_handler);            
        select_query.on('end', db_response_to_common_login_end_handler);            
    }
}

module.exports.check_input = check_input;
module.exports.check_register = check_register;
module.exports.check_login = check_login;
