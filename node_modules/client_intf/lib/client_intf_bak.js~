var pg = require('pg');

var http = require('http');
var events = require('events');

var pgString = "postgres://postgre:123@localhost/cloud_server_db";
var client = new pg.Client(pgString);

module.exports.client_packet_handler= client_packet_handler;

client.connect();

var socket_arr = new Array();

function handle_insert_register_to_database_response(insert_query_result)
{
    console.log(insert_query_result);
    this.http_res.writeHead(200, {'Content-Type': 'application/json'});
    this.http_res.end("{\"type\":\"resp_register\",\"status\":\"0\"}");
}


function handle_add_register_to_database_response(select_query_result)
{
    console.log("Enter req_response");
    
    if ( 0 == select_query_result.rowCount)
    {
        var insert_string = "INSERT INTO cloud_ac VALUES ('" + this.http_req.body.sn + "','" +  this.http_req.body.mac+ "','" + true + "')";
	var insert_query = client.query(insert_string);
        insert_query.http_res = this.http_res;
        insert_query.on( 'end', handle_insert_register_to_database_response);
    }
    
    else
    {        
/*    UPDATE cloud_ac SET online = false WHERE sn = 'CZWB816MAH00019'; */
        var update_string = "UPDATE cloud_ac SET online = 'true' WHERE sn = '" + this.http_req.body.sn+ "'";
        var update_query = client.query( update_string);
        update_query.on('end', handle_update_query_response);

        this.http_res.writeHead(200, {'Content-Type': 'application/json'});
        this.http_res.end("{\"type\":\"resp_register\",\"status\":\"2\"}");
        handle_client_online_event(sn_json, socket);
    }

    console.log("Exit req_response");
}

function handle_add_register_to_database(req, res)
{
    console.log("Enter handle_add_register_to_database");
    var select_string = "SELECT * FROM cloud_ac WHERE SN = '" + req.body.sn + "'";
    
    console.log(select_string);
    var select_query = client.query( select_string);

    /* add http_req & http_res property to select query */
    select_query.http_req = req;
    select_query.http_res= res
    select_query.on('end', handle_add_register_to_database_response);
}

function handle_client_register( req, res)
{
    console.log("Enter handle_client_register");

    handle_add_register_to_database(req, res);

    console.log("Exit  handle_client_register");
}
 
function handle_update_query_response(update_query_result)
{
    console.log("Enter handle_update_query_response");
    console.log(update_query_result);
    console.log("Exit  handle_update_query_response");
}

function handle_client_offline(socket)
{
    console.log("Enter handle_client_offline");
    console.log(this.sn_json);

    var i = 0;

    console.log(socket_arr.length);

    for ( i = 0; i < socket_arr.length; i++)
    {
        if ( socket_arr[i].sn_json == this.sn_json)
        {
            socket_arr.splice(i, 1);
        }
    }

/*    UPDATE cloud_ac SET online = false WHERE sn = 'CZWB816MAH00019'; */
    var update_string = "UPDATE cloud_ac SET online = 'false' WHERE sn = '" + this.sn_json+ "'";
    var update_query = client.query( update_string);

    update_query.on('end', handle_update_query_response);
    console.log(socket_arr.length);
    console.log("Exit  handle_client_offline");
}

function handle_client_online_event(sn_json, socket)
{
    var i = 0;
    var device_find = 0;

/*
    for (i = 0; i < socket_arr.length; i++)
    {
       if ( socket_arr[i].sn_json == sn_json)
       {
           socket_arr[i].socket.end();
           socket_arr[i].socket = socket;
           device_find = 1;
       }
    }
*/

    if ( 0 == device_find)
    {
        var socket_arr_obj = new Object();
        socket_arr_obj.socket = socket;
        socket_arr_obj.sn_json = sn_json;
        socket_arr.push(socket_arr_object);
    }
}

/* Contract: insert_query_result -> call event.
 * Purpose : if insert successfully, call event.
 */
 
function database_insert_register_response_handler(insert_query_result)
{
    console.log("Enter database_register_insert_register_response_handler");
    /* call event */
    console.log("Exit database_register_insert_register_response_handler");
}

/* Contract: database_select_result -> insert or update database.
 * Purpose : According to the database result, 
 *           (1) insert or update database
 *           (2) call event after insert or update database.
 */

function database_response_to_select_handler(select_query_result)
{
    console.log("Enter database_register_packet_response_handler");

    if ( 0 == select_query_result.rowCount)
    {
        console.log("row Count == 0");
        var insert_string = "INSERT INTO cloud_ac VALUES ('" + this.http_req.body.sn + "','" +  this.http_req.body.mac+ "','" + true + "')";
        console.log(insert_string);
        var insert_query = client.query(insert_string);
        /*  insert_query.http_res = this.http_res; */
        insert_query.on( 'end', database_response_to_insert_handler);
    }
    else
    {
        console.log("0 != rowCount");
        /*    UPDATE cloud_ac SET online = false WHERE sn = 'CZWB816MAH00019'; */
        var update_string = "UPDATE cloud_ac SET online = 'true' WHERE sn = '" + this.http_req.body.sn+ "'";
        var update_query = client.query( update_string);
        update_query.on('end', database_response_to_update_handler);

        this.http_res.writeHead(200, {'Content-Type': 'application/json'});
        this.http_res.end("{\"type\":\"resp_register\",\"status\":\"2\"}");
        console.log("12345");
        handle_client_online_event(sn_json, socket);
    }
}

function database_error_handler(error)
{
    console.log(error);
}

/* Contract: sn_json -> database update; event called after database update;
 * Purpose : When sn_json comes, we should
 *           (1) insert the entry or update the entry(online) about the client info to the database.
 *           (2) called the event to update the socket_array, & response.
 * Examples: after a sn info update the database  
 *           (1) successfully, call the success event.
 *           (2) error,        call the error handler event.
 */
function database_register_packet_handler(register_obj)
{
    console.log("Enter database_register_packet_handler");
    var select_string = "SELECT * FROM cloud_ac WHERE SN = '" + register_obj.http_req.body.sn + "'";
    var select_query = client.query( select_string);
    select_query.register_obj = register_obj;

    select_query.on('end', database_response_to_register_select_handler);
    select_query.on('error', database_error_handler);
    console.log("Exit database_register_packet_handler");
}

/* Contract: register_obj -> 1.database update; 2. socket_array update; 3. response handled
 * Purpose : When a register packet comes we should 
 *          (1) insert or update the entry about the client info to  the database.
 *          (2) update the entry about the client to the socket_array
 *          (3) when the above two handled, we shoud response to the client correctly.
 *          (4) we should listen on the event socket.close and handle the event - client offline.
 * Example : when a register packet comes, its sn is phicomm123456.
 *          (1) if the database does not have the entry whose sn is phicomm123456, insert it.
 *              if already has, update it--set online true.
 *          (2) if socket array do not has the sn, insert it.
 *              if already has, delete it and insert it .
 *          (3) after the two above, respose correctly.
 * 
 */
function client_register_packet_handler( register_obj)
{
    console.log("Enter client_register_packet_handler");
    database_regiser_packet_handler(register_obj);
    console.log("Exit client_register_packet_handler");
}
/* Contract: http req, http res -> 
 * Purpose : When a http packet comes from a client, we want to handle it correctly.
 */
function client_packet_handler( req, res)
{
    console.log("Enter client_handler");

   // console.log(req);
    if ( req.body.sn)
    {
        /* A client register packet comes */
        var register_obj = new Object();
        register_obj.socket = req.socket;
        register_obj.http_req = req;
        register_obj.http_res = res;
        register_obj.addLister('database_query_response', database_query_response_handler);

        client_register_packet_handler(register_obj);
/*        console.log("has sn");
          req.socket.sn_json = req.body.sn; */
        
/*        handle_client_register(req, res); */
        
        req.socket.on('close', handle_client_offline);
    }

    else 
    {
        console.log("no sn");
    }
}
