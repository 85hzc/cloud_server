var pg = require('pg');
var db = require('db');
var pgString = db.consqlString;

var client = new pg.Client(pgString);
client.connect();

var g_connId=1;
var sockets = {};
var devConnMap = {};

function setDevOffline(arr) {
    var devIdListStr = "";

    if(arr.length == 0) {
        return;
    }

    for(var i=0; i<arr.length; i++) {
        devIdListStr = devIdListStr + arr[i];
        if(i<arr.length-1) {
            devIdListStr = devIdListStr + ",";
        }
    }

    var updateStr="UPDATE iot_device SET online='false' WHERE \"deviceId\" IN (" + devIdListStr + ");"

    console.log("setDevOffline updateStr="+updateStr);
    client.query(updateStr, function(err, result) { 
        if (err) {
            console.error(err.stack);
        }
    });
}

function newConnection(socket) {
    var skInfo = {};
    skInfo.sk=socket;
    skInfo.devList = new Array();
    sockets[g_connId] = skInfo;
    return g_connId++;
}

function releaseConnection(connId) {
    if(typeof(connId) == 'undefined') {
        console.log("releaseConnection connId is undefined!");
        return;
    }

    console.log("releaseConnection connId:"+connId);
    if(typeof(sockets[connId]) == 'undefinded') {
        console.log("releaseConnection missing info for connId " + connId + "in sockets!");
        return;
    }

    setDevOffline(sockets[connId].devList);
    delete sockets[connId];
}

function updateDevInfo(devId, connId) {
    devConnMap[devId] = connId; 

    if(typeof(sockets[connId]) == 'undefinded') {
        console.log("updateDevInfo missing info for connId " + connId + "in sockets!");
        return;
    }
    sockets[connId].devList.push(devId);
}

function getDevListByConnId(connId) {
    return sockets[connId].devList;
}

function getSocketByDevId(devId) {
    var connId = devConnMap[devId];
    if(typeof(connId) == 'undefined') {
        console.log("Can't find connId for devId" + devId);
        return -1;
    }

    if(typeof(sockets[connId]) == 'undefinded') {
        console.log("getSocketByDevId missing info for connId " + connId + "in sockets!");
        return;
    }
    return sockets[connId].sk;
}

exports.newConnection = newConnection;
exports.releaseConnection = releaseConnection;
exports.updateDevInfo = updateDevInfo;
exports.getDevListByConnId = getDevListByConnId;
exports.getSocketByDevId = getSocketByDevId;
