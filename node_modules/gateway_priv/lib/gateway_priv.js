var socket_arr  = require('../../socket_arr');
var wechat_priv = require('../../wechat_priv');
var cmdkey = require('cmdkey');
var pg = require('pg');
var db = require('db');
var pgString = db.consqlString;
var client = new pg.Client(pgString);

client.connect();

var gatewayTableName = " iot_gateway ";
var gatewayIdName = "gatewayId"

var gateway_socket_arr = new Array();

function send_result(res, retCode, errStr, commandId) {
    var ret = {
        ret: retCode,
        errStr: errStr,
        commandId: commandId
    };
    console.log(JSON.stringify(ret));
    res.send(JSON.stringify(ret));
}

function sleep(numberMillis) 
{
    var now = new Date();
    var exitTime = now.getTime() + numberMillis;
    while (true) 
	{
	    now = new Date();
	   if (now.getTime() > exitTime)
		return;
	}
}

function strToJson(str)
{
    var json = eval('(' + str + ')');
    return json;
} 


function select_row_handler(result)
{
   this.rows_arr.push(result);
}

function insert_end_handler(result)
{
    var endResult = {
        ret: 0,
        type: "rsp_device_online",
        commandId: this.setObj.cmdId,
        manufacture: this.setObj.manufacture,
        manufactureSN: this.setObj.manufactureSN,
        deviceId: this.rows_arr[0].deviceId.toString()
    };

    console.log(endResult);

    this.setObj.res.send(JSON.stringify(endResult));

    /* update device's socket mapping table */
    this.setObj.sk.id  = this.rows_arr[0].deviceId.toString();
    socket_arr.socket_arr_add(gateway_socket_arr, this.setObj.sk, this.setObj.sk.id);
}

function insert_device_handler(result)
{
    if (0 == result.rowCount) {
        /*TODO: shall we add this device into iot_device table even missing the dataModel ?*/
        send_result(res, 90005, "missing dataModelId!");
    } else {
        /* insert to iot_device */
        /* TODO: check insert devData with dataModel */

        /* TODO: is gatewayId needed here? */
        var query_str = "INSERT INTO iot_device (\"deviceDataModelId\", \"gatewayId\", online, \"devData\", manufacture, \"manufactureSN\") VALUES('"
                     + this.rows_arr[0].dataModelId + "','"
                     + "1" + "','"
                     + true + "','"
                     + JSON.stringify(this.setObj.devData) + "','"
                     + this.setObj.manufacture + "','"
                     + this.setObj.manufactureSN + "') RETURNING \"deviceId\";";

        console.log(query_str);
        var query = client.query(query_str);
        query.setObj = this.setObj;
        query.rows_arr = new Array();
        query.on('row', select_row_handler);
        query.on('end', insert_end_handler);
    }
}

function device_online_handler(result)
{
    if (0 == result.rowCount) {
        /* 
         * No this device before, insert it into iot_device table.
         * But we need to get deviceDataModeId first.
         */
        var query_str = "SELECT * FROM iot_dev_datamodel" 
                       + " WHERE manufacture = '" + this.setObj.manufacture + "' AND "
                       + " \"manufactureDataModelId\" = '" + this.setObj.manufactureDataModelId + "';";

        console.log(query_str);

        var query = client.query(query_str);
        query.setObj = this.setObj;
        query.rows_arr = new Array();

        query.on('row', select_row_handler);        
        query.on('end', insert_device_handler);
    } else {
        /* already in iot_device table, update it */
        /* TODO: is gatewayId needed here? */
        var update_string = "UPDATE iot_device"
                           + " SET online = 'true', \"gatewayId\" = '" + "1"
                           +   "' , \"devData\" = '"    + JSON.stringify(this.setObj.devData)
                           + "' WHERE manufacture ='" + this.setObj.manufacture
                           + "' AND \"manufactureSN\" = '" + this.setObj.manufactureSN + "';";

        console.log(update_string);

        var endResult = {
            ret: 0,
            type: "rsp_device_online",
            commandId: this.setObj.cmdId,
            manufacture: this.setObj.manufacture,
            manufactureSN: this.setObj.manufactureSN,
            deviceId: this.rows_arr[0].deviceId.toString()
        };

        console.log(endResult);
        this.setObj.res.send(JSON.stringify(endResult));

        /* update device's socket mapping table */
        this.setObj.sk.id  = this.rows_arr[0].deviceId.toString();
        socket_arr.socket_arr_add(gateway_socket_arr, this.setObj.sk, this.setObj.sk.id);

        /* TODO: need add error handler */
        var update_query = client.query(update_string);
    }
}

function gateway_select_handler(result)
{
    console.log("Enter gateway_select_handler");

    if (0 == result.rowCount)
    {
        var query_str = "INSERT INTO " + gatewayTableName + "(\"" + gatewayIdName + "\", online) VALUES ('"
                       + this.gatewayId + "', 'true');";

        console.log(query_str);
        client.query(query_str);
    }

    else
    {

        var update_string = "UPDATE " + gatewayTableName + "SET online = 'true' WHERE  \""  
                        + gatewayIdName + "\" = '" + this.gatewayId + "';";

        console.log(update_string);

        var update_query = client.query(update_string);
    }
}

function message_handle(req, res)
{ 
    req.socket.setKeepAlive(true);
    req.socket.setTimeout(0);
    console.log(req.body);

    if ("gateway_online" == req.body.type)
    {
        res.writeHead(200, {'Content-Type': 'application/json'});
        var end_str = "{\"type\":\"rsp_gateway_online\", \"commandId\": 0, \"status\":" + 0 + "}";
        res.end(end_str);

        req.socket.id  = req.body.sn;
        socket_arr.socket_arr_add(gateway_socket_arr, req.socket, req.socket.id);

        var query_str = "SELECT * FROM iot_gateway WHERE \"gatewayId\" = '" + req.body.sn + "'";
        var query = client.query(query_str);
        query.gatewayId = req.body.sn;
        query.on('end', gateway_select_handler);
        req.socket.on('close', gateway_close_socket);
    }
    else if ("device_online" == req.body.type)
    {
        var devData=req.body.devData;
        var cmdId= req.body.commandId;

        if(typeof(cmdId) == 'undefined') {
            send_result(res, 70003, "missing commandId!");
            return;
        } 

        if(typeof(devData) == 'undefined') {
            send_result(res, 70003, "missing devData", cmdId);
            return;
        }

        var manufacture = devData.manufacture;
        var manufactureSN = devData.manufactureSN; 
        var manufactureDataModelId = devData.manufactureDataModelId;

        if(typeof(manufacture) == 'undefined' ||
           typeof(manufactureSN) == 'undefined' ||
           typeof(manufactureDataModelId) == 'undefined' ) {
            send_result(res, 70003, "missing manufacture or manufactureSN or manufactureDataModelId", cmdId);
            return;
        }

        var select_str = "SELECT * FROM iot_device WHERE manufacture = '"
            + manufacture + "' AND " + "\"manufactureSN\" = '" + manufactureSN + "';";

        console.log(select_str);

        var query = client.query(select_str);

        query.setObj = new Object();
        query.setObj.manufacture = manufacture;
        query.setObj.manufactureDataModelId = manufactureDataModelId;      
        query.setObj.manufactureSN = manufactureSN;
        query.setObj.devData = devData;
        query.setObj.cmdId = cmdId;
        query.setObj.sk = req.socket;
        query.setObj.res = res;

        query.rows_arr = new Array();     

        query.on('row', select_row_handler);
        query.on('end', device_online_handler);
    }
    else if ( "resp_get" == req.body.type)
    {
        if ( 2 == req.body.status)
        {
            var user_id = req.body.user_id;
            var content = req.body.keyname;

            console.log(user_id);
            console.log(content);
        
            var socket = socket_arr.socket_arr_get(weixin_priv.weixin_socket.arr);
            if ( -1 != socket)
            {
                res.reply({
                    type: 'text',
                    content: content
                });
            }
        }
    }
    else if ( "rsp_set" == req.body.type)
    {
        var commandId = req.body.commandId;
        var deviceId = req.body.deviceId;
        var devData= req.body.devData;

        console.log("Enter rsp_set");
        console.log(req.body);

        if (typeof(commandId) == "undefined" || typeof(deviceId) == "undefined"
                || typeof(devData) == "undefined") {
            return;
        }

        /* TODO: now always return success, need handling error */
        cmdkey.update(commandId.toString(), "Success");

        var selectStr =  "SELECT "
                + "iot_device.\"deviceId\",iot_device.online,iot_device.\"devData\","
                + "iot_dev_datamodel.\"dataModelId\",iot_dev_datamodel.\"devDataModel\" "
                + "FROM iot_device INNER JOIN iot_dev_datamodel "
                + "ON iot_device.\"deviceDataModelId\"=iot_dev_datamodel.\"dataModelId\" "
                + "WHERE iot_device.\"deviceId\"='"
                + deviceId + "';";

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                return;
            }

            if(result.rowCount != 1) {
                console.error("90002, 后台数据库错误！");
                return;
            }

            var newDevData = result.rows[0].devData;

            for(var x in devData) {
                if (typeof(newDevData[x]) != "undefined") {
                    newDevData[x] = devData[x];
                }
            }

            var updateStr = "UPDATE iot_device SET \"devData\"='"
                                + JSON.stringify(newDevData) 
                                + "' WHERE \"deviceId\"='" + deviceId + "';"
                                
            client.query(updateStr, function(err, result) {
                if (err) {
                    console.error(err.stack);
                    return;
                }

                if(result.rowCount != 1) {
                    console.error("90002, 更新设备数据成功！");
                    return;
                }
                console.log("0, 更新设备信息成功!");
            });
        });
    }
}

function gateway_close_socket(socket)
{
          
    var update_string = "UPDATE iot_gateway SET online = 'false' WHERE \"gatewayId\" = '" + this.id + "';";

    console.log(update_string);

    var update_query = client.query(update_string);


    var update_string = "UPDATE iot_device SET online = 'false' WHERE \"gatewayId\" = '" + this.id + "';";

    console.log(update_string);

    var update_query = client.query(update_string);
   
    socket_arr.socket_arr_del(gateway_socket_arr, this.id);
}

module.exports.message_handle = message_handle;
module.exports.gateway_socket_arr = gateway_socket_arr;
module.exports.gateway_value = 1;
