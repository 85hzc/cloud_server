var socket_arr  = require('../socket_arr');
var wechat_priv = require('../wechat_priv');
var cmdkey = require('cmdkey');
var devConn = require('dev_conn');
var pg = require('pg');
var db = require('db');
var pgString = db.consqlString;
var client = new pg.Client(pgString);

client.connect();

var gatewayTableName = " iot_gateway ";
var gatewayIdName = "gatewayId"

var gateway_socket_arr = new Array();

function send_result(sock, retCode, errStr, commandId) {
    var ret = {
        ret: retCode,
        errStr: errStr,
        commandId: commandId
    };
    console.log(JSON.stringify(ret));
    sock.write(JSON.stringify(ret));
}

function strToJson(str)
{
    var json = eval('(' + str + ')');
    return json;
} 


function select_row_handler(result)
{
   this.rows_arr.push(result);
}

function device_close_socket(socket)
{
    var updateString = "UPDATE iot_device SET online = 'false' WHERE \"deviceId\" = '" + this.id + "';";
    console.log(updateString);
    client.query(updateString);
    socket_arr.socket_arr_del(gateway_socket_arr, this.id);
}

function insert_end_handler(result)
{
    var endResult = {
        ret: 0,
        type: "rsp_device_online",
        commandId: this.setObj.cmdId,
        manufacture: this.setObj.manufacture,
        manufactureSN: this.setObj.manufactureSN,
        deviceId: this.rows_arr[0].deviceId.toString()
    };

    console.log(endResult);

    this.setObj.sock.write(JSON.stringify(endResult)+"\r\n");

    /* update device's socket mapping table */
    devConn.updateDevInfo(this.rows_arr[0].deviceId, this.setObj.skId);
}

function insert_device_handler(result)
{
    if (0 == result.rowCount) {
        /*TODO: shall we add this device into iot_device table even missing the dataModel ?*/
        send_result(this.setObj.sock, 90005, "missing dataModelId!");
    } else {
        /* insert to iot_device */
        /* TODO: check insert devData with dataModel */

        /* TODO: is gatewayId needed here? */
        var query_str = "INSERT INTO iot_device (\"deviceDataModelId\", \"gatewayId\", online, \"devData\", manufacture, \"manufactureSN\") VALUES('"
                     + this.rows_arr[0].dataModelId + "','"
                     + "1" + "','"
                     + true + "','"
                     + JSON.stringify(this.setObj.devData) + "','"
                     + this.setObj.manufacture + "','"
                     + this.setObj.manufactureSN + "') RETURNING \"deviceId\";";

        console.log(query_str);
        var query = client.query(query_str);
        query.setObj = this.setObj;
        query.rows_arr = new Array();
        query.on('row', select_row_handler);
        query.on('end', insert_end_handler);
    }
}

function device_online_handler(result)
{
    if (0 == result.rowCount) {
        /* 
         * No this device before, insert it into iot_device table.
         * But we need to get deviceDataModeId first.
         */
        var query_str = "SELECT * FROM iot_dev_datamodel" 
                       + " WHERE manufacture = '" + this.setObj.manufacture + "' AND "
                       + " \"manufactureDataModelId\" = '" + this.setObj.manufactureDataModelId + "';";

        console.log(query_str);

        var query = client.query(query_str);
        query.setObj = this.setObj;
        query.rows_arr = new Array();

        query.on('row', select_row_handler);        
        query.on('end', insert_device_handler);
    } else {
        /* already in iot_device table, update it */
        /* TODO: is gatewayId needed here? */
        var update_string = "UPDATE iot_device"
                           + " SET online = 'true', \"gatewayId\" = '" + "1"
                           +   "' , \"devData\" = '"    + JSON.stringify(this.setObj.devData)
                           + "' WHERE manufacture ='" + this.setObj.manufacture
                           + "' AND \"manufactureSN\" = '" + this.setObj.manufactureSN + "';";

        console.log(update_string);

        var endResult = {
            ret: 0,
            type: "rsp_device_online",
            commandId: this.setObj.cmdId,
            manufacture: this.setObj.manufacture,
            manufactureSN: this.setObj.manufactureSN,
            deviceId: this.rows_arr[0].deviceId.toString()
        };

        console.log(endResult);
        this.setObj.sock.write(JSON.stringify(endResult)+"\r\n");

        /* update device's socket mapping table */
        devConn.updateDevInfo(this.rows_arr[0].deviceId, this.setObj.skId);

        /* TODO: need add error handler */
        var update_query = client.query(update_string);
    }
}

function message_handle(message, sock)
{ 
    var msgStr = message.toString('ascii', 0, message.length);
    console.log("Get message:\r\n" + msgStr);

    if (msgStr[0] != '{') {
        console.log("return: message is not json.");

        sock.write(";");
        return;
    }

    var msg = JSON.parse(msgStr);

    if (typeof(msg.type) == "undefined") {
        console.log("return: message type is missing.");

        sock.write(";");
        return;
    }

    if ("gateway_online" == msg.type)
    {
        /*res.writeHead(200, {'Content-Type': 'application/json'});
        var end_str = "{\"type\":\"rsp_gateway_online\", \"commandId\": 0, \"status\":" + 0 + "}";
        res.end(end_str);

        sock.id  = msg.sn;
        socket_arr.socket_arr_add(gateway_socket_arr, sock, socket.id);

        var query_str = "SELECT * FROM iot_gateway WHERE \"gatewayId\" = '" + msg.sn + "'";
        var query = client.query(query_str);
        query.gatewayId = msg.sn;
        req.socket.on('close', gateway_close_socket);*/
    }
    else if ("device_online" == msg.type)
    {
        var devData=msg.devData;
        var cmdId= msg.commandId;

        if(typeof(cmdId) == 'undefined') {
            send_result(sock, 70003, "missing commandId!");
            return;
        } 

        if(typeof(devData) == 'undefined') {
            send_result(sock, 70003, "missing devData", cmdId);
            return;
        }

        var manufacture = devData.manufacture;
        var manufactureSN = devData.manufactureSN; 
        var manufactureDataModelId = devData.manufactureDataModelId;

        if(typeof(manufacture) == 'undefined' ||
           typeof(manufactureSN) == 'undefined' ||
           typeof(manufactureDataModelId) == 'undefined' ) {
            send_result(sock, 70003, "missing manufacture or manufactureSN or manufactureDataModelId", cmdId);
            return;
        }

        var select_str = "SELECT * FROM iot_device WHERE manufacture = '"
            + manufacture + "' AND " + "\"manufactureSN\" = '" + manufactureSN + "';";

        console.log(select_str);

        var query = client.query(select_str);

        query.setObj = new Object();
        query.setObj.manufacture = manufacture;
        query.setObj.manufactureDataModelId = manufactureDataModelId;      
        query.setObj.manufactureSN = manufactureSN;
        query.setObj.devData = devData;
        query.setObj.cmdId = cmdId;
        query.setObj.skId = sock.id;
        query.setObj.sock = sock;

        query.rows_arr = new Array();     

        query.on('row', select_row_handler);
        query.on('end', device_online_handler);
    }
    else if ( "resp_get" == msg.type)
    {
        if ( 2 == msg.status)
        {
            var user_id = msg.user_id;
            var content = msg.keyname;

            console.log(user_id);
            console.log(content);
        
            var socket = socket_arr.socket_arr_get(weixin_priv.weixin_socket.arr);
            if ( -1 != socket)
            {
                sock.write({
                    type: 'text',
                    content: content
                });
            }
        }
    }
    else if ( "rsp_set" == msg.type)
    {
        var commandId = msg.commandId;
        var deviceId = msg.deviceId;
        var devData= msg.devData;

        console.log("Enter rsp_set");
        //console.log(req.body);

        if (typeof(commandId) == "undefined" || typeof(deviceId) == "undefined"
                || typeof(devData) == "undefined") {
            return;
        }

        /* TODO: now always return success, need handling error */
        cmdkey.update(commandId.toString(), "Success");

        var selectStr =  "SELECT "
                + "iot_device.\"deviceId\",iot_device.online,iot_device.\"devData\","
                + "iot_dev_datamodel.\"dataModelId\",iot_dev_datamodel.\"devDataModel\" "
                + "FROM iot_device INNER JOIN iot_dev_datamodel "
                + "ON iot_device.\"deviceDataModelId\"=iot_dev_datamodel.\"dataModelId\" "
                + "WHERE iot_device.\"deviceId\"='"
                + deviceId + "';";

        client.query(selectStr, function(err, result) {
            if (err) {
                console.error(err.stack);
                return;
            }

            if(result.rowCount != 1) {
                console.error("90002, 后台数据库错误！");
                return;
            }

            var newDevData = result.rows[0].devData;

            for(var x in devData) {
                if (typeof(newDevData[x]) != "undefined") {
                    newDevData[x] = devData[x];
                }
            }

            var updateStr = "UPDATE iot_device SET \"devData\"='"
                                + JSON.stringify(newDevData) 
                                + "' WHERE \"deviceId\"='" + deviceId + "';"
                                
            client.query(updateStr, function(err, result) {
                if (err) {
                    console.error(err.stack);
                    return;
                }

                if(result.rowCount != 1) {
                    console.error("90002, 更新设备数据成功！");
                    return;
                }
                console.log("0, 更新设备信息成功!");
            });
        });
    }
    else if ("rsp_plugin_action" == msg.type) {
        console.log("receive plugin_action result");
        var commandId = msg.commandId;

        if (0 == msg.ret) {
            var deviceId = msg.deviceId;
            var pluginId = msg.pluginId;
            
            cmdkey.update(commandId.toString(), "Success");

            if ("install" == msg.action) {
                var version = msg.version;

                var insertStr = "INSERT INTO gateway_plugin VALUES ('" 
                    + deviceId + "', '" + pluginId + "', '" + version + "');";
                console.log(insertStr);

                client.query(insertStr, function(err, result) {
                    if (err) {
                        console.error(err.stack);
                        return;
                    }

                    if (result.rowCount != 1) {
                        console.error("90002, 新增设备数据失败！");
                    }

                    console.log("0, 新增设备信息成功!");
                });
            }
            else if ("update" == msg.action) {
                var version = msg.version; 

                var updateStr = "UPDATE gateway_plugin SET \"version\"='"
                    + version + "' WHERE \"pluginId\"='" + pluginId + "' AND \"deviceId\"='"
                    + deviceId + "';";

                console.log(updateStr);

                client.query(updateStr, function(err, result) {
                    if (err) {
                        console.err(err.stack);
                        return;
                    }
                    
                    if (result.rowCount != 1) {
                        console.error("90002, 更新设备数据失败！");
                        return;
                    }

                    console.log("0, 更新设备信息成功!");
                });
            }
            else if ("delete" == msg.action) {
                var deleteStr = "DELETE FROM gateway_plugin WHERE \"deviceId\"='"
                    + deviceId + "' AND \"pluginId\"='"
                    + pluginId + "';";
                console.log(deleteStr);

                client.query(deleteStr, function(err, result) {
                    if (err) {
                        console.err(err.stack);
                        return;
                    }

                    if (result.rowCount != 1) {
                        console.error("90002, 删除设备数据失败！");
                        return;
                    }

                    console.log("0, 删除设备信息成功!");
                });
            }
        }
        else {
            cmdkey.update(commandId.toString(), "Fail");
        }
    }

}

function gateway_close_socket(socket)
{
          
    var update_string = "UPDATE iot_gateway SET online = 'false' WHERE \"gatewayId\" = '" + this.id + "';";

    console.log(update_string);

    var update_query = client.query(update_string);


    var update_string = "UPDATE iot_device SET online = 'false' WHERE \"gatewayId\" = '" + this.id + "';";

    console.log(update_string);

    var update_query = client.query(update_string);
   
    socket_arr.socket_arr_del(gateway_socket_arr, this.id);
}

module.exports.message_handle = message_handle;
module.exports.gateway_socket_arr = gateway_socket_arr;
module.exports.gateway_value = 1;
