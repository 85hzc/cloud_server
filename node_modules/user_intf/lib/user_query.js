module.exports.user_row_result = user_row_result;
module.exports.user_end_result = user_end_result;

/*var mysql   = require('mysql');
var db = require('db');
var client = mysql.createConnection(db.mysql);
 
client.connect();*/

var mysql   = require('mysql');
var db = require('db');

var client;
function handleDisconnect() {
client = mysql.createConnection(db.mysql); // Recreate the connection, since
// the old one cannot be reused.
client.connect(function(err) {              // The server is either down
if(err) {                                     // or restarting (takes a while sometimes).
console.log('error when connecting to db:', err);
setTimeout(handleDisconnect, 1000); // We introduce a delay before attempting to reconnect,
}                                     // to avoid a hot loop, and to allow our node script to
});                                     // process asynchronous requests in the meantime.
// If you're also serving http, display a 503 error.
client.on('error', function(err) {
console.log('db error', err);
if(err.code === 'PROTOCOL_CONNECTION_LOST') { // Connection to the MySQL server is usually
handleDisconnect();                         // lost due to either server restart, or a
} else {                                      // connnection idle timeout (the wait_timeout
throw err;                                  // server variable configures this)
}
});
}
handleDisconnect();






function device_row_result(result)
{
    console.log(result.rowCount);
    this.device_rows.push(result);
}

function device_end_result(result)
{
    console.log(result.rowCount);
    console.log(this.device_rows);

    var content_str = "您绑定设备的设备个数为" + result.rowCount + "\n\n";
    var i = 0;

    for ( i = 0; i < result.rowCount; i++)
    {
        if ( true == this.device_rows[i].online)
        {
            content_str = content_str + "设备id为" + this.device_rows[i].device_id + "的运行状态为" + this.device_rows[i].run_status + "\n\n";
        }
        else
	    {
            content_str = content_str + "设备id为" + this.device_rows[i].device_id + "的运行状态为不在线.\n\n";
        }
    }

    this.res.reply({
                  type: 'text',
                  content: content_str
    });
}

function user_row_result(result)
{
//    console.log(result);                                                                                                                            
    this.user_rows.push(result);
}

function user_end_result(result)
{
    console.log("user_end_result rowCount = " + result.rowCount);

    if ( 0 == result.rowCount)
    {

        this.res.reply({
                  type: 'text',
                  content: '您没有绑定设备。'
        });

    }

    else
    {
	var content_str = "您绑定设备的设备个数为" + result.rowCount + "\n";

	var i = 0;

	var select_str = "SELECT * FROM device_table WHERE (device_id = '" + this.user_rows[0].device_id + "'";

        for ( i = 1; i < this.user_rows.length; i++)
	    {
            select_str = select_str + " OR device_id = '" + this.user_rows[i].device_id + "'";
        }

        select_str = select_str + ");";

	var select_device_query = client.query(select_str);
        select_device_query.res = this.res;
	select_device_query.device_rows = new Array();
        select_device_query.on('row', device_row_result);

	select_device_query.on('end', device_end_result);

	console.log(select_str);

        console.log(content_str);
//        console.log(result);                                                                                                                       
    }
}
