var socket_arr = require('../../socket_arr');
var pg = require('pg');
var gateway_socket_arr = require(../../gateway_priv).gateway_socket_arr;
var socket_arr_tool = require(../../socket_arr);

var pgString = "postgres://wudi:123@localhost/cloud_server_db";
var client = new pg.Client(pgString);
client.connect();

module.exports.message_handle = message_handle;
module.exports.weixin_socket_arr = weixin_socket_arr;

var weixin_socket_arr    = new Array();


function db_res_bind_select_query(select_result)
{
    console.log("Enter db_res_bind_select_query");

    if ( 0 == select_result.rowCount)
    {
        var insert_string = "INSERT INTO user_table VALUES ('"
                    + this.userID + "','"
                    + this.deviceID + "','"
                    + 1 + "')";

        console.log(insert_string);

        var insert_query = client.query(insert_string);
    }
    else
    {
        console.log(" 0 != row");
    }
}

function message_handle(req, res)
{      
    
    var message = req.weixin;

    console.log(message);  
    var msgType = message.MsgType;

    var eventKey = message.EventKey;

    var weixin_user = message.FromUserName;

    console.log(msgType);

    if ( "device_event" == msgType)
    {       
        console.log("Enter device_event");
     
        console.log("event = " + message.Event);

        var userID = message.OpenID;

	var deviceID = message.DeviceID;

        if ( "bind" == message.Event)
        {
            console.log("Enter Event bind");
            var select_string = "SELECT * FROM user_table WHERE user_id = '" 
                                + userID + "' and dev_id = '" + deviceID + "'";

            console.log(select_string);

            var select_query = client.query( select_string);
            select_query.userID   = userID;
            select_query.deviceID = deviceID;
            select_query.on('end', db_res_bind_select_query);
        }

        else if ( "unbind" == message.Event)
        {
            console.log("Enter Event unbind");
 
            var delete_string = "DELETE FROM user_table WHERE user_id = '"
                              + userID + "' and dev_id = '" + deviceID + "'";
            var delete_query  = client.query(delete_string);
        }
    }

    else if ( "event" == msgType)
    {
	if (("query" == eventKey)
	    || ("turn_on" == eventKey)
	    || ("turn_off" == eventKey)
	   )
	{

            console.log("Enter weixin");
            req.socket.id = weixin_user;
            socket_arr.socket_arr_add(weixin_socket_arr, req.socket, weixin_user);

            if ("query" == eventKey)
            {
                   
               
                res.reply({
                  type: 'text',
                  content: 'query'
                });

            }

            else if ( "turn_on" == eventKey)
            {
		        var message = req.weixin;
                var fromusername = message.FromUserName;
                pg.connect(pgString, function(err, client, done) {
                    client.query("select * from user_table u,gateway_table g where u.device_id=g.device_id and user_id=$1", [fromusername], function(err, result) {

                        if (err){
                            res.reply("error db");
                        } else {
                            if(1 == res.rows[0].gateway_status){
                                //发送开启指令到网关，
                                //成功则改变数据库
                                //返回信息给app
                                var count_device = res.rowCount;
                                for(var i = 0; i < count_device; i++){
                                    var socket = socket_arr_tool.socket_arr_get(gateway_socket_arr, res.rows[i].getway_id);
                                    var device_id = res.rows[i].device_id;
                                    socket.write({
                                        "type":"set",
                                        "serial":100, 
                                        "device_id":device_id,
                                        "device_type": "led",
                                        "config": {"power_switch": "on", "status": "OK", "color_rgb": "30"}
                                    });

                                    socket.on('data', function(data){
                                        var returndata = JSON.parse(data);
                                        if(200 == data.code){
                                            res.reply("开起成功");
                                        }else{
                                            res.reply("开起失败");
                                        }
                                    });

                                }
                                
                            }else{
                                res.reply("error 网关不在线或者设备没有和相应的网关绑定");
                            }
                        }

                        //res.reply(content);
                        client.end();
                    });
                });

                /*res.reply({
                  type: 'text',
                  content: 'turn on successfully'
                });*/
            }

            else 
            {
                var message = req.weixin;
                var fromusername = message.FromUserName;
                pg.connect(pgString, function(err, client, done) {
                    client.query("select * from user_table u,gateway_table g where u.device_id=g.device_id and user_id=$1", [fromusername], function(err, result) {

                        if (err){
                            res.reply("error db");
                        } else {
                            if(1 == res.rows[0].gateway_status){
                                //发送关闭指令到网关，
                                //成功则改变数据库
                                //返回信息给app
                                var count_device = res.rowCount;
                                for(var i = 0; i < count_device; i++){
                                    var socket = socket_arr_tool.socket_arr_get(gateway_socket_arr, res.rows[i].getway_id);
                                    var device_id = res.rows[i].device_id;
                                    socket.write({
                                        "type":"set",
                                        "serial":100, 
                                        "device_id":device_id,
                                        "device_type": "led",
                                        "config": {"power_switch": "off", "status": "OK", "color_rgb": "30"}
                                    });

                                    socket.on('data', function(data){
                                        var returndata = JSON.parse(data);
                                        if(200 == data.code){
                                            res.reply("开起成功");
                                        }else{
                                            res.reply("开起失败");
                                        }
                                    });

                                }
                                
                            }else{
                                res.reply("error 网关不在线或者设备没有和相应的网关绑定");
                            }
                        }

                        //res.reply(content);
                        client.end();
                    });
                });

                /*res.reply({
                  type: 'text',
                  content: 'turn off successfully'
                });*/
            }

            req.socket.on('close', weixin_close_socket);
        }
    }

    else
    {
    }

}


function weixin_close_socket()
{
    socket_arr.socket_arr_del(weixin_socket_arr, this.id);
}
